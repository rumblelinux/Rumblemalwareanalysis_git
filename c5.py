import subprocess
import time
import os
import shutil
import datetime
import re
from prettytable import PrettyTable

def get_session_name():
    return datetime.datetime.now().strftime('%d_%b_%y__%H_%M_%f')

def norilog(file_path):
    noriben_path = "Noriben.py"
    
    confirm = input(f"Press 'y' to confirm running malware from {file_path} and log with Noriben: ")
    if confirm.lower() != "y":
        print("Not confirmed, exiting.")
        return

    waiting_time = 60 
    print(f"[!] This tool will check the system in {waiting_time} seconds, please allow Procmon to run!")
    print("[+]....")
    print("[+]....")
    print("[+]....")
    
    print("[+] Running malware...")
    
    if confirm.lower() == "y":
        proc = subprocess.Popen(["python", noriben_path], stdin=subprocess.PIPE) 
        malware_proc = subprocess.Popen([file_path])        
        for i in range(waiting_time, 0, -1):
            print(f"[+] Time remaining: {i} seconds...")
            time.sleep(1)
        print("[+] Stopping malware and saving logs...")
        malware_proc.kill() 
        proc.stdin.write(b"q")
        proc.stdin.flush()
        proc.wait()  

    print("[+] Saving logs, it may take a long time, please wait...")
    current_dir = os.path.dirname(os.path.abspath(__file__))

    # Save results to logs folder
    logs_dir = os.path.join(current_dir, "logs")
    if not os.path.exists(logs_dir):
        os.mkdir(logs_dir)

    extensions = [".txt", ".csv", ".pml"]   

    for fname in os.listdir():
        if fname.startswith("Noriben_"): 
            src = os.path.join(os.getcwd(), fname)
            dst = os.path.join(logs_dir, fname)

            base, ext = os.path.splitext(fname)
            if ext in extensions:  
                shutil.move(src, dst)
                print(f"Saved log file to: {dst}") 
            else:
                print("Noriben log not found")

    # Get the latest log.txt file path
    list_of_files = [f for f in os.listdir(logs_dir) if f.endswith(".txt")]
    latest_logfile = max(list_of_files, key=lambda x: os.path.getctime(os.path.join(logs_dir, x)))
    log_path = os.path.join(logs_dir, latest_logfile)

    # Analyze and display results
    analyze_report(log_path)


def analyze_report(log_path):
    print("\nMalware Analysis Report from Noriben:")
    with open(log_path, 'r', encoding='utf-8') as f:
        log_content = f.read()
        
    table = PrettyTable()
    table.field_names = ["Category", "Description", "Value"]

    # 2. Process Creation (not contains Windows processes)
    windows_processes = [
        "svchost.exe", "explorer.exe", "taskhost.exe", "lsass.exe", "services.exe",
        "csrss.exe", "wininit.exe", "dwm.exe", "spoolsv.exe", "smss.exe",
        "RuntimeBroker.exe", "ctfmon.exe", "DllHost.exe"
    ]

    process_created = re.findall(r'\[CreateProcess\].+Process Name: (.+?)\].+PID: (\d+)\]', log_content)
    filtered_processes = []
    for process_name, pid in process_created:
        if process_name.lower() not in windows_processes:
            filtered_processes.append((process_name, pid))
    process_count = len(filtered_processes)
    table.add_row(["Process Creation", "Number of suspicious processes created", process_count])

    # 3. Registry Changes (not contain Windows's registry)
    windows_registry_patterns = [
        r"Microsoft\\Windows\\",
        r"REGISTRY\\A\\",
        r"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion",
        r"HKLM\\System\\CurrentControlSet\\Services\\bam\\",
        r"HKCU\\SOFTWARE\\Microsoft\\Input\\TypingInsights\\",
        r"HKLM\\SOFTWARE\\Microsoft\\Multimedia",
        r"HKCU\\SOFTWARE\\Microsoft\\Internet Explorer",
         r"HKLM\\SOFTWARE\\Microsoft\\WindowsUpdate"
    ]

    registry_changes = re.findall(r'\[RegSetValue\].+? > (.+?)  = ', log_content)
    filtered_registry_changes = []
    for change in registry_changes:
        is_windows_registry = any(re.search(pattern, change, re.IGNORECASE) for pattern in windows_registry_patterns)
        if not is_windows_registry:
            filtered_registry_changes.append(change)

    registry_change_count = len(filtered_registry_changes)
    if registry_change_count > 0: 
        table.add_row(["Registry Changes", "Number of suspicious registry key modifications", registry_change_count])
        for change in filtered_registry_changes:
            table.add_row(["", "Modified Key", change])

    # 4. Network Connections
    network_conn = re.findall(r'\[UDP\]|\[TCP\]', log_content)
    network_conn_count = len(network_conn)
    table.add_row(["Network Connections", "Number of network connections established", network_conn_count])

    # 5. IP Addresses (đã được chỉnh sửa để lọc bỏ IP local)
    ip_list = re.findall(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}', log_content)
    
    # Biểu thức chính quy để xác định dải IP local
    private_ip_regex = re.compile(
        r'(^127\.)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)'
    )

    # Lọc bỏ IP local
    filtered_ip_list = [ip for ip in ip_list if not private_ip_regex.match(ip)]

    # Hiển thị IP
    if filtered_ip_list:
        ip_addresses = ", ".join(filtered_ip_list)
        table.add_row(["IP Addresses", "Unique external IP addresses contacted", ip_addresses])
        print("Please use https://www.abuseipdb.com/ to check IP addresses found\n")
    
    # 6. File Activity Analysis
    file_activity = re.findall(r'\[CreateFile\].+|\[RenameFile\].+|\[DeleteFile\].+', log_content)
    created_files = 0
    renamed_files = 0
    deleted_files = 0

    for activity in file_activity:
        if "[CreateFile]" in activity:
            created_files += 1
        elif "[RenameFile]" in activity:
            renamed_files += 1
        elif "[DeleteFile]" in activity:
            deleted_files += 1

    if created_files > 0:
        table.add_row(["File Activity", "Number of files created", created_files])
    if renamed_files > 0:
        table.add_row(["", "Number of files renamed", renamed_files]) 
    if deleted_files > 0:
        table.add_row(["", "Number of files deleted", deleted_files])

    # Display the analysis table
    print(table)
