import subprocess
import time
import os
import shutil
import datetime
import re

def get_session_name():
    return datetime.datetime.now().strftime('%d_%b_%y__%H_%M_%f')

def norilog(file_path):
    noriben_path = "Noriben.py"
    
    confirm = input("Press y to confirm running malware from {} and log with Noriben: ".format(file_path))
    if confirm.lower() != "y":
        print("Not confirmed, exiting")
        return

    waiting_time = 60
    print("[!] This tool will check the system in {} seconds, please allow Procmon to run!".format(waiting_time))
    print("[+]....")
    print("[+]....")
    print("[+]....")
    
    print("[+] Running malware...")
    
    if confirm.lower() == "y":
        proc = subprocess.Popen(["python", noriben_path], stdin=subprocess.PIPE) 
        malware_proc = subprocess.Popen([file_path])        
        for i in range(waiting_time, 0, -1):
            print("[+] Time remaining: {} seconds...".format(i))
            time.sleep(1)
        print("[+] Stopping malware and saving logs...")
        malware_proc.kill() 
        proc.stdin.write(b"q")
        proc.stdin.flush()
        proc.wait()  

    print("[+] Saving logs, it may take a long time, please wait...")
    current_dir = os.path.dirname(os.path.abspath(__file__))

    #Save results to folder logs
    logs_dir = os.path.join(current_dir, "logs")
    if not os.path.exists(logs_dir):
        os.mkdir(logs_dir)

    extensions = [".txt", ".csv", ".pml"]   

    for fname in os.listdir():
        if fname.startswith("Noriben_"): 
            src = os.path.join(os.getcwd(), fname)
            dst = os.path.join(logs_dir, fname)

            base, ext = os.path.splitext(fname)
            if ext in extensions:  
                shutil.move(src, dst)
                print(f"Saved log file to: {dst}") 
            else:
                print("Noriben log not found")

    # Lấy đường dẫn file log.txt mới nhất trong thư mục logs
    list_of_files = os.listdir(logs_dir)
    latest_logfile = max(list_of_files, key=lambda x: os.path.getctime(os.path.join(logs_dir, x)))
    log_path = os.path.join(logs_dir, latest_logfile)

    # Đọc nội dung file log
    with open(log_path, 'r', encoding='utf-8') as f:
        log_content = f.read()
            
    # 1. Thời gian thực thi
    time_execute = re.search(r'Execution time: ([\d.]+) seconds', log_content)
    if time_execute:
        print(f"Time executed: {time_execute.group(1)} seconds")
        
    # 2. Số tiến trình được tạo    
    process_created = re.findall(r'\[CreateProcess\].+', log_content)
    print(f"Number process created: {len(process_created)}")

    # 3. Những thay đổi trong Registry
    registry_changes = re.findall(r'\[RegSetValue\] .+', log_content)
    print(f"Registry changes: {len(registry_changes)} changes")

    # 4. Số kết nối mạng
    network_conn = re.findall(r'\[UDP\]|\[TCP\]', log_content)
    print(f"Network connection: {len(network_conn)} connect")

    # 5. Danh sách IP
    ip_list = re.findall(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}', log_content)
    ip_list = list(set(ip_list))
    print(f"List IP found: {ip_list}")
    print("\nPlease use https://www.abuseipdb.com/ to check IP found\n")
    
    # 6. File Activity Analysis
    file_activity = re.findall(r'\[CreateFile\]|\[RenameFile\]|\[DeleteFile\]', log_content)
    created_files = 0
    renamed_files = 0
    deleted_files = 0

    for activity in file_activity:
        if "[CreateFile]" in activity:
            created_files += 1
        elif "[RenameFile]" in activity:
            renamed_files += 1
        elif "[DeleteFile]" in activity:
            deleted_files += 1

    # Display File Activity Summary
    print("\nFile Activity Summary:")
    print(f"  [+] Created Files: {created_files}")
    print(f"  [+] Renamed Files: {renamed_files}")
    print(f"  [+] Deleted Files: {deleted_files}")

    # Kết luận
    print("\nConclusion:")

    # Check changes:
    if len(registry_changes) > 10:
        print("  [+] Detected a significant number of registry changes.")
        print("  [+] Analyzing the nature and locations of changes...")
        malicious_registry_keys = ["HKCU\\Software\\Malware", "HKLM\\System\\MaliciousKey"]
        suspicious_patterns = ["Trojan", "Malware", "Suspicious"]

        for change in registry_changes:
            for key in malicious_registry_keys:
                if key in change:
                    print(f"\n[!] Detected change in sensitive registry key: {change}")
                    print("  [!] This could be indicative of malicious activity.")

        for change in registry_changes:
            for pattern in suspicious_patterns:
                if pattern in change:
                    print(f"\n[!] Detected suspicious pattern in registry change: {change}")
                    print("  [!] This could be indicative of malicious activity.")

    if len(process_created) > 5 or len(network_conn) > 10:
        print("\n[+] Detected suspicious process creations or network connections.")
        print("  [+] Additional analysis is recommended.")

    if created_files > 5 or renamed_files > 2 or deleted_files > 2:
        print("\n[!] Detected suspicious file activity.")
        print("[!] Additional analysis is recommended.")
    
    # Overall Verdict
    if (
        len(registry_changes) > 10
        or len(process_created) > 5
        or len(network_conn) > 10
        or created_files > 5
        or renamed_files > 2
        or deleted_files > 2
    ):
        print("[!] Potential indicators of maybe malicious activity detected")
    else:
        print("[+] No clear indicators of malicious activity found. The file appears to be clean.")

