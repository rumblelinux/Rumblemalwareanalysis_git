import re
import base64
import binascii

def is_base64(s):
    try:
        # Attempt to decode the string using base64
        decoded = base64.b64decode(s)
        # Check if the decoded string is valid UTF-8
        decoded.decode('utf-8')
        return True
    except (binascii.Error, UnicodeDecodeError):
        return False

def is_hex(s):
    try:
        # Attempt to decode the string using hex
        decoded = bytes.fromhex(s)
        return True
    except (binascii.Error, ValueError):
        return False

def is_network_signature(s):
    # Custom regular expression for detecting potential network signatures
    network_signature_regex = r'\*\(\w+\)#|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(?::\d+)?'

    return re.search(network_signature_regex, s) is not None

def string_analysis(file_path):
    values = []
    results = []
    all_strings = []

    with open(file_path, 'rb') as f:
        content = f.read()

    strings = re.findall(b'[ -~]{1,}', content)

    for string in strings:
        string = string.decode('utf-8', 'ignore')

        details = {}
        all_strings.append(string)

        # URLs
        urls = re.findall(r'https?://[^\s<>"]+|www\.[^\s<>"]+', string)
        if urls:
            details["source"] = "Suspicious URL"
            details["danger"] = "Could communicate with malicious server"
            details["string"] = urls
            results.append(details)
            values.extend(urls)

        # Registry keys
        registry_keys = re.findall(r'HKEY_[A-Za-z0-9_/\\]+', string)
        if registry_keys:
            details = {"source": "Remarkable registry keys", "danger": "Registry key could change by malware", "string": registry_keys}
            results.append(details)
            values.extend(registry_keys)

        # Email addresses
        emails = re.findall(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+', string)
        if emails:
            details = {"source": "Suspicious emails", "danger": "May found something worthy from this email", "string": emails}
            results.append(details)
            values.extend(emails)

        # File paths
        file_paths = re.findall(r'[A-Za-z]:(\\[^:"><|?*\x00-\xFF]*)+', string)
        if file_paths:
            details = {"source": "Suspicious location path", "danger": "May expose new creation files", "string": file_paths}
            results.append(details)
            values.extend(file_paths)

        # Other regex checks
        keywords = re.findall(r'password|login|apikey|key|secret|credential|database', string)
        if keywords:
            details = {"source": "Sensitive keyword", "danger": "May expose authentication details", "string": keywords}
            results.append(details)
            values.extend(keywords)
        
        # Base64
        base64_strings = re.findall(r'^[A-Za-z0-9+/]+=*$', string)
        if base64_strings:
            try:
                if is_base64(base64_strings[0]):
                    details = {"source": "Base64 encoded string", "danger": "May contain encrypted or obfuscated data", "string": base64_strings}
                    results.append(details)
                    values.append(base64_strings[0])
            except Exception as e:
                pass

        # Hex
        hex_strings = re.findall(r'^[A-Fa-f0-9]+$', string) 
        if hex_strings:
            try:
                if is_hex(hex_strings[0]):
                    details = {"source": "Hex encoded string", "danger": "May contain encrypted or obfuscated data", "string": hex_strings}
                    results.append(details)
                    values.append(hex_strings[0])
            except Exception as e:
                pass

         # Network signatures
        if is_network_signature(string):
            details = {"source": "Potential network signature", "danger": "May indicate network-related activity", "string": [string]}
            results.append(details)
            values.append(string)
            
        # IP addresses
        ip_addresses = re.findall(r'\b(?:\d{1,3}\.){3}\d{1,3}(?::\d+)?\b', string)
        if ip_addresses:
            details = {"source": "IP Address", "danger": "May indicate network-related activity", "string": ip_addresses}
            results.append(details)
            values.extend(ip_addresses)
            
        # File
        file_program_names = re.findall(r'[^\s<>":|?*]+(?:\.exe|\.c)', string)
        if file_program_names:
            details = {"source": "File or program name", "danger": "Potential executable file", "string": file_program_names}
            results.append(details)
            values.extend(file_program_names)


        # Executable commands    
        #+) Tìm các command có dạng "/c <command>" hoặc "<command> /c"
        executable_commands = re.findall(r'(?i)/c\s*\w+|\w+\s*/c', string)
        if executable_commands:
            details = {"source": "Executable system commands", "danger": "May execute code or commands on system", "string": executable_commands}
            results.append(details)
            values.extend(executable_commands)

        #+) Commands
        suspicious_commands = re.findall(r'(?i)(cmd|powershell|wget|ping|ipconfig)\s+[^\s]+', string)
        if suspicious_commands:
            details = {"source": "Executable system commands", "danger": "May execute code or commands on system", "string": executable_commands}
            results.append(details)
            values.extend(suspicious_commands)

        #+) Delete commands
        delete_commands = re.findall(r'(?i)\b(del|erase|rm|rmdir|deltree)\b', string)
        if delete_commands:
            details = {"source": "Executable system commands", "danger": "May delete code or commands on system", "string": executable_commands}
            results.append(details)
            values.extend(delete_commands)

    for result in results:
        print(f"Suspicious string found: {result['string']}")
        print(f"\t- Source: {result['source']}")
        print(f"\t- Potential danger: {result['danger']}\n")

    values = list(set(values))
    print("\nUseful string values: ", values)


    return values

    