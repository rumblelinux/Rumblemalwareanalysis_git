import re
import base64
import binascii
import win32api
from tabulate import tabulate

def file_signed(file_path):
    try:
        cert_context = win32api.GetFileVersionInfo(file_path, "\\VarFileInfo\\Translation")
        return bool(cert_context)
    except Exception as e:
        print(f"Error checking file signature: {str(e)}")
        return False

def is_base64(s):
    try:
        base64.b64decode(s)
        return True
    except (binascii.Error, ValueError):
        return False

def is_hex(s):
    try:
        bytes.fromhex(s)
        return True
    except ValueError:
        return False

def is_network_signature(s):
    network_signature_regex = r'\b(\d{1,3}\.){3}\d{1,3}(?::\d+)?\b'
    return re.search(network_signature_regex, s) is not None

def string_analysis(file_path):
    values = []
    results = []
    all_strings = []

    with open(file_path, 'rb') as f:
        content = f.read()

    strings = re.findall(b'[ -~]{3,}', content)

    for string in strings:
        string = string.decode('utf-8', 'ignore')
        details = {}
        all_strings.append(string)

        # URLs
        urls = re.findall(r'https?://[^\s<>"]+|www\.[^\s<>"]+', string)
        if urls:
            details = {"Source": "Suspicious URL", "Danger": "Could communicate with malicious server", "String": urls}
            results.append(details)
            values.extend(urls)

        # Registry keys
        registry_keys = re.findall(r'HKEY_[A-Za-z0-9_/\\]+', string)
        if registry_keys:
            details = {"Source": "Remarkable registry keys", "Danger": "Registry key could change by malware", "String": registry_keys}
            results.append(details)
            values.extend(registry_keys)

        # Email addresses
        emails = re.findall(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+', string)
        if emails:
            details = {"Source": "Suspicious emails", "Danger": "May found something worthy from this email", "String": emails}
            results.append(details)
            values.extend(emails)

        # File paths
        file_paths = re.findall(r'[A-Za-z]:(\\[^:"><|?*\x00-\xFF]*)+', string)
        if file_paths:
            details = {"Source": "Suspicious location path", "Danger": "May expose new creation files", "String": file_paths}
            results.append(details)
            values.extend(file_paths)

        # Sensitive keywords
        keywords = re.findall(r'\b(password|login|apikey|key|secret|credential|database)\b', string)
        if keywords:
            details = {"Source": "Sensitive keyword", "Danger": "May expose authentication details", "String": keywords}
            results.append(details)
            values.extend(keywords)
        
        # Base64 encoded strings
        base64_strings = re.findall(r'\b[A-Za-z0-9+/=]+\b', string)
        for base64_string in base64_strings:
            if is_base64(base64_string):
                details = {"Source": "Base64 encoded string", "Danger": "May contain encrypted or obfuscated data", "String": base64_string}
                results.append(details)
                values.append(base64_string)

        # Hex encoded strings
        hex_strings = re.findall(r'\b[A-Fa-f0-9]+\b', string)
        for hex_string in hex_strings:
            if is_hex(hex_string):
                details = {"Source": "Hex encoded string", "Danger": "May contain encrypted or obfuscated data", "String": hex_string}
                results.append(details)
                values.append(hex_string)

        # Network signatures
        if is_network_signature(string):
            details = {"Source": "Potential network signature", "Danger": "May indicate network-related activity", "String": string}
            results.append(details)
            values.append(string)
            
        # IP addresses
        ip_addresses = re.findall(r'\b(\d{1,3}\.){3}\d{1,3}(?::\d+)?\b', string)
        if ip_addresses:
            details = {"Source": "IP Address", "Danger": "May indicate network-related activity", "String": ip_addresses}
            results.append(details)
            values.extend(ip_addresses)
            
        # File or program names
        file_program_names = re.findall(r'[^\s<>":|?*]+\.(exe|c)', string)
        if file_program_names:
            details = {"Source": "File or program name", "Danger": "Potential executable file", "String": file_program_names}
            results.append(details)
            values.extend(file_program_names)

        # Executable commands    
        executable_commands = re.findall(r'(?i)/c\s*\w+|\w+\s*/c', string)
        if executable_commands:
            details = {"Source": "Executable system commands", "Danger": "May execute code or commands on system", "String": executable_commands}
            results.append(details)
            values.extend(executable_commands)

        # Suspicious commands
        suspicious_commands = re.findall(r'(?i)(cmd|powershell|wget|ping|ipconfig)\s+[^\s]+', string)
        if suspicious_commands:
            details = {"Source": "Executable system commands", "Danger": "May execute code or commands on system", "String": suspicious_commands}
            results.append(details)
            values.extend(suspicious_commands)

        # Delete commands
        delete_commands = re.findall(r'(?i)\b(del|erase|rm|rmdir|deltree)\b', string)
        if delete_commands:
            details = {"Source": "Executable system commands", "Danger": "May delete code or commands on system", "String": delete_commands}
            results.append(details)
            values.extend(delete_commands)

    # Print results in a table
    table = [[res["Source"], res["Danger"], res["String"]] for res in results]
    print(tabulate(table, headers=["Source", "Potential Danger", "String"], tablefmt="grid"))

    values = list(set(values))
    print("\nUseful string values: ", values)

    return values
