import hashlib
import requests
import json

def calc_hashes(fpath):
    hashes = {}
    
    with open(fpath, 'rb') as f:
        content = f.read()
        
    hashes['md5'] = hashlib.md5(content).hexdigest()
    hashes['sha1'] = hashlib.sha1(content).hexdigest()
    hashes['sha256'] = hashlib.sha256(content).hexdigest()
    
    return hashes

API_KEY = "15af28d7476ece6cbab45525c010fca594f8b42c0f07c8f8774849a15fba5412" 
BASE_URL = "https://www.virustotal.com/api/v3/files/"

def scan_file(file_path):
    # Calculate hashes using the calc_hashes function from c1.py
    file_hashes = calc_hashes(file_path)
    
    for hash_type, hash_value in file_hashes.items():
        print(f"{hash_type}: {hash_value}")
        
        # Call scan_hash function for each hash type
        scan_hash(hash_type, hash_value)

def scan_hash(hash_type, hash_value):
    url = BASE_URL + hash_value
    
    headers = {
        "Accept": "application/json",
        "x-apikey": API_KEY
    }
    
    try: 
        response = requests.request("GET", url, headers=headers)
        response_json = json.loads(response.content)
        
        if response.status_code == 200:
            if 'last_analysis_stats' in response_json['data']['attributes']:
                positives = response_json['data']['attributes']['last_analysis_stats'].get('malicious', 0)              
                print(f"Detected by {positives} antiviruses as malicious for {hash_type} hash")
            else:
                print(f"No analysis stats available for {hash_type} hash")
        else:
            print(f"Error scanning {hash_type} hash. Response: {response.text}")
        
    except requests.exceptions.HTTPError as e:
            if e.response.status_code == 404:
                print(f"No scan results found for {hash_type} hash") 
            else:
                print(f"Error scanning {hash_type} hash:", e)


