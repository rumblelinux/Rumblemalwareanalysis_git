import hashlib
import requests

def calc_hashes(fpath):
    """
    Calculate MD5, SHA1, and SHA256 hashes for the given file.

    Args:
        fpath (str): Path to the file.

    Returns:
        dict: A dictionary containing the calculated hashes.
    """
    hashes = {}
    try:
        with open(fpath, 'rb') as f:
            content = f.read()
    except FileNotFoundError:
        print(f"File not found: {fpath}")
        return {}

    hashes['md5'] = hashlib.md5(content).hexdigest()
    hashes['sha1'] = hashlib.sha1(content).hexdigest()
    hashes['sha256'] = hashlib.sha256(content).hexdigest()

    return hashes

API_KEY = "15af28d7476ece6cbab45525c010fca594f8b42c0f07c8f8774849a15fba5412"
BASE_URL = "https://www.virustotal.com/api/v3/files/"

def scan_file(file_path):
    """
    Scan the given file using VirusTotal API.

    Args:
        file_path (str): Path to the file.
    """
    print(f"Scanning {file_path}...")
    file_hashes = calc_hashes(file_path)

    if not file_hashes:
        return

    print("Calculated hashes:")
    for hash_type, hash_value in file_hashes.items():
        print(f"{hash_type}: {hash_value}")

    print("\nScan results:")

    with requests.Session() as session:
        session.headers.update({
            "Accept": "application/json",
            "x-apikey": API_KEY
        })

        for hash_type, hash_value in file_hashes.items():
            url = f"{BASE_URL}{hash_value}"
            try:
                response = session.get(url)
                response_json = response.json()

                if response.status_code == 200:
                    if 'last_analysis_stats' in response_json['data']['attributes']:
                        positives = response_json['data']['attributes']['last_analysis_stats'].get('malicious', 0)
                        scan_result = response_json['data']['attributes']['last_analysis_stats'].get('result', '')
                        print(f"Detected by {positives} antiviruses as malicious for {hash_type} hash")
                        assess_threat_level(positives, scan_result, hash_type)
                    else:
                        print(f"No analysis stats available for {hash_type} hash")
                elif response.status_code == 404:
                    print(f"No scan results found for {hash_type} hash (file unknown to VirusTotal)")
                    assess_threat_level(0, "Unknown", hash_type)
                else:
                    print(f"Error scanning {hash_type} hash. Response: {response.text}")

            except requests.exceptions.HTTPError as e:
                if e.response.status_code == 403:
                    print("Invalid API key. Please check your VirusTotal API key.")
                else:
                    print(f"Error scanning {hash_type} hash:", e)

            except requests.exceptions.RequestException as e:
                print(f"Error scanning {hash_type} hash:", e)

def assess_threat_level(positives, scan_result, hash_type):
    """
    Assess the threat level based on the number of antiviruses that flagged the file as malicious.

    Args:
        positives (int): Number of antiviruses that flagged the file as malicious.
        scan_result (str): The scan result (e.g., "Timeout", "Unable to process file type", "Unknown").
        hash_type (str): The type of hash (e.g., "md5", "sha1", "sha256").
    """
    if positives > 10:
        print("[!!!] This file is very likely MALICIOUS for the given hash\n")
    elif positives > 1:
        print("[!] This file might be unsafe for the given hash\n")
    elif scan_result == "Timeout":
        print("[?] Timeout occurred while processing the file for the given hash\n")
    elif scan_result == "Unable to process file type":
        print("[?] Engine unable to process the file type for the given hash\n")
    elif scan_result == "Unknown":
        print(f"[?] No scan results found for {hash_type} hash (file unknown to VirusTotal)\n")
    else:
        print("[v] This file seems safe for the given hash\n")
