import math
import array
import pefile
import peutils



def get_entropy(data):
    if len(data) == 0:
        return 0.0

    occurrence_count = array.array('L', [0] * 256)
    
    # Check the data type and convert if necessary
    if isinstance(data[0], bytes):
        data = array.array('B', data)
    
    for byte in data:
        occurrence_count[byte] += 1  # Use byte value as an index

    entropy = 0
    for x in occurrence_count:
        if x != 0:
            p_x = float(x) / len(data)
            entropy -= p_x * math.log(p_x, 2)

    return entropy


def check_imports(pe):
    try:
        pe.DIRECTORY_ENTRY_IMPORT
    except AttributeError:
        return True # no imports -> likely packed
    return False

def check_entry_point(pe):
    try: 
        ep = pe.OPTIONAL_HEADER.AddressOfEntryPoint
        if ep == 0:
            return True # no entry point -> likely packed
    except AttributeError:
        return True
    return False  

def detect_high_entropy(file_path, threshold=7.0):
    try:
        with open(file_path, 'rb') as file:
            entropy = get_entropy(array.array('B', file.read()))
        if entropy > threshold:
            print(f"High entropy detected: {entropy}")
    except Exception as e:
        print(f"Error detecting high entropy: {str(e)}")


def detect_themida(file_path):
    try:
        pe = pefile.PE(file_path, fast_load=True)
        signatures = [b'Themida', b'WinLicense']
        for section in pe.sections:
            for signature in signatures:
                if signature in section.Name:
                    print(f"{signature.decode()} detected")
                    return
    except Exception as e:
        print(f"Error detecting Themida/WinLicense: {str(e)}")


def detect_aspack(file_path):
    with open(file_path, 'rb') as file:
        data = file.read(10)
        if b'ASPack' in data:
            print("ASPack detected")


def detect_upx(file_path):
    try:
        pe = pefile.PE(file_path, fast_load=False)
        signatures = [b'UPX0', b'UPX1', b'UPX2', b'UPX3', b'UPX!']

        # Check for UPX signatures in the PE file's sections
        for section in pe.sections:
            for signature in signatures:
                if signature in section.get_data():
                    print("UPX Detected")
                    return

        # Check for UPX ratio (raw size / memory size)
        raw_size = pe.get_data_size()
        mem_size = pe.get_memory_mapped_image_size()
        ratio = raw_size / mem_size

        if ratio > 4:
            print("Potentially packed with UPX")

    except Exception as e:
        print(f"This file may packed by UPX but have some problem detection error: {e}")

# Remove the is_packed check from detect_method function
def detect_method(file_path):
    try:
        pe = pefile.PE(file_path)
        
        if (peutils.is_probably_packed(pe) or 
            check_imports(pe) or
            check_entry_point(pe)):

            print("[+] Detected packed sample!")
            
            # Handle bytes
            print(type(pe.__data__))
            entropy_data = pe.get_memory_mapped_image()
            print(type(entropy_data))
            get_entropy(entropy_data)

            detect_upx(file_path)
            detect_themida(file_path)
            detect_aspack(file_path)
            detect_high_entropy(file_path)
        else:
            print("[-] Not packed")

    except Exception as e:
        print(f"Error scanning file: {str(e)}")


