import os
import pefile
import time

def get_compilation_time(file_path):
    try:
        pe = pefile.PE(file_path)
        timestamp = pe.FILE_HEADER.TimeDateStamp
        compiled_time = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(timestamp))
        return compiled_time
    except Exception as e:
        return None

def find_imports(file_path):
    imports = []

    try:
        pe = pefile.PE(file_path)
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            module = entry.dll.decode('utf-8')
            functions = [func.name.decode('utf-8') for func in entry.imports]
            imports.append({"module": module, "functions": functions})
    except Exception as e:
        pass

    return imports


def analyze_malware_capabilities(imports):
    # List of suspicious or malicious functions
    suspicious_functions = [
        "CreateThread", "CreateProcessA", "ShellExecuteExA", "WSAStartup",
        "connect", "socket", "send", "recv", "WriteFile", "ReadFile"
    ]

    # Check for suspicious functions in imports
    suspicious_imports = []
    for imp in imports:
        module = imp['module']
        functions = imp['functions']
        for func in functions:
            if func in suspicious_functions:
                suspicious_imports.append((module, func))

    # Print analysis results
    if suspicious_imports:
        print("\nPotential Malicious Capabilities:")
        for module, func in suspicious_imports:
            print(f"Module: {module}, Function: {func}")
        print("\nFile may have capabilities associated with malware.")
    else:
        print("\nNo potential malicious capabilities found.")


def file_analysis(file_path):
    # Check file compilation time
    compilation_time = get_compilation_time(file_path)
    if compilation_time:
        print(f"File compiled at: {compilation_time}")
    else:
        print("Failed to retrieve compilation time information.")

    # Find and analyze imports
    imports = find_imports(file_path)
    if imports:
        print("\nImports:")
        for imp in imports:
            print(f"Module: {imp['module']}")
            print(f"Functions: {', '.join(imp['functions'])}\n")
    else:
        print("No imports found.")

    # Analyze malware capabilities    
    analyze_malware_capabilities(imports)

