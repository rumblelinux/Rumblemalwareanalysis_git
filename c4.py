import pefile
import time
from collections import defaultdict

def get_compilation_time(file_path):
    try:
        pe = pefile.PE(file_path)
        timestamp = pe.FILE_HEADER.TimeDateStamp
        compiled_time = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(timestamp))
        pe.close()  # Close the PE file
        return compiled_time
    except Exception as e:
        return None

def find_imports(file_path):
    imports = defaultdict(list)

    try:
        pe = pefile.PE(file_path)
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            module = entry.dll.decode('utf-8')
            for func in entry.imports:
                function_name = func.name.decode('utf-8') if func.name else None
                imports[module].append(function_name)
        pe.close()  # Close the PE file
    except Exception as e:
        print(f"Error while processing {file_path}: {e}")

    return imports

def analyze_malware_capabilities(imports):
    function_techniques = {
        "CreateThread": "Defense Evasion (T1055)",
        "CreateProcessA": "Execution (T1059)",
        "ShellExecuteExA": "Execution (T1204)",
        "CreateFile": "Execution (T1106)",
        "WriteFile": "Execution (T1106)",
        "ReadFile": "Collection (T1119)",
        "DeleteFile": "Command and Control (T1105)",
        "MoveFile": "Command and Control (T1105)",
        "RegCreateKeyEx": "Command and Control (T1102)",
        "RegSetValueEx": "Command and Control (T1102)",
        "RegDeleteKey": "Defense Evasion (T1112)",
        "WSAStartup": "Network Communication (T1105)",
        "connect": "Network Communication (T1105)",
        "socket": "Network Communication (T1105)",
        "send": "Network Communication (T1105)",
        "recv": "Network Communication (T1105)",
        "SetWindowsHookEx": "Defense Evasion (T1055)",
        "SetServiceStatus": "Defense Evasion (T1055)",
        "CreateService": "Persistence (T1543)",
        "IsDebuggerPresent": "Defense Evasion (T1055)",
        "CheckRemoteDebuggerPresent": "Defense Evasion (T1055)",
        "GetTickCount": "Discovery (T1120)"
    }

    mapped_techniques = defaultdict(set)
    for module, functions in imports.items():
        for func in functions:
            if func in function_techniques:
                mapped_techniques[function_techniques[func]].add((module, func))

    print("\nMapped MITRE ATT&CK Techniques:")
    for technique, mapped_functions in mapped_techniques.items():
        if mapped_functions:
            print(f"[+] {technique}:")
            for module, function in mapped_functions:
                print(f"  - {module}: {function}")
            print()

def file_analysis(file_path):
    compilation_time = get_compilation_time(file_path)
    if compilation_time:
        print(f"[*] File compiled at: {compilation_time}")
    else:
        print("[-] Failed to retrieve compilation time information.")

    imports = find_imports(file_path)
    analyze_malware_capabilities(imports)


