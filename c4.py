import pefile
import time
from collections import defaultdict
import re
from tabulate import tabulate

def get_compilation_time(file_path):
    try:
        pe = pefile.PE(file_path)
        timestamp = pe.FILE_HEADER.TimeDateStamp
        compiled_time = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(timestamp))
        pe.close()
        return compiled_time
    except Exception as e:
        print(f"Error while retrieving compilation time: {e}")
        return None

def find_imports(file_path):
    imports = defaultdict(list)
    try:
        pe = pefile.PE(file_path)
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            module = entry.dll.decode('utf-8', errors='ignore')
            for func in entry.imports:
                function_name = func.name.decode('utf-8', errors='ignore') if func.name else None
                imports[module].append(function_name)
        pe.close()
    except Exception as e:
        print(f"Error while processing {file_path}: {e}")
    return imports

def detect_technique(function_name, module_name, imports):

    # Network Communication & C2
    if any(f in imports for f in ["WSAStartup", "connect", "socket", "send", "recv", "InternetOpenA", "InternetOpenUrlA", "HttpSendRequestA", "URLDownloadToFileA"]):
        return "Network Communication (T1041), Command and Control (T1071)"
    
    # Process Injection
    if "CreateRemoteThread" in imports or ("VirtualAllocEx" in imports and "WriteProcessMemory" in imports):
        return "Process Injection (T1055)"
    
    # File System Manipulation
    if "CreateFileA" in imports and "WriteFile" in imports and "CloseHandle" in imports:
        return "Data Encrypted for Impact (T1486), File and Directory Discovery (T1083)"
    
    # Registry Manipulation
    if any(f in imports for f in ["RegCreateKeyExA", "RegSetValueExA", "RegQueryValueExA", "RegDeleteValueA", "RegDeleteKeyA", "RegEnumKeyExA", "RegEnumValueA"]):
        return "Modify Registry (T1112)"

    # Anti-Analysis 
    if "IsDebuggerPresent" in imports or "CheckRemoteDebuggerPresent" in imports:
        return "Debugger Evasion (T1070)"
    
    # Hooking
    if "SetWindowsHookExA" in imports or "SetWindowsHookExW" in imports:
        return "Keylogging (T1056), Input Capture (T1056)"

    # Credential Access
    if any(f in imports for f in ["CredEnumerateA", "CredReadA", "CredWriteA"]):
        return "OS Credential Dumping (T1003)"

    # Function_techniques dictionary
    function_techniques = {
        "CreateThread": "Defense Evasion (T1055)",
        "CreateProcessA": "Execution (T1059)",
        "ShellExecuteExA": "Execution (T1204)",
        "CreateFileA": "Execution (T1106)",
        "WriteFile": "Execution (T1106)",
        "ReadFile": "Collection (T1119)",
        "DeleteFileA": "Command and Control (T1105)",
        "MoveFileA": "Command and Control (T1105)",
        "RegCreateKeyExA": "Command and Control (T1102)",
        "RegSetValueExA": "Command and Control (T1102)",
        "RegDeleteKeyA": "Defense Evasion (T1112)",
        "WSAStartup": "Network Communication (T1105)",
        "connect": "Network Communication (T1105)",
        "socket": "Network Communication (T1105)",
        "send": "Network Communication (T1105)",
        "recv": "Network Communication (T1105)",
        "SetWindowsHookExA": "Defense Evasion (T1055)",
        "SetServiceStatus": "Defense Evasion (T1055)",
        "CreateServiceA": "Persistence (T1543)",
        "IsDebuggerPresent": "Defense Evasion (T1055)",
        "CheckRemoteDebuggerPresent": "Defense Evasion (T1055)",
        "GetTickCount": "Discovery (T1120)",
        "SetWindowsHookExA": "Keylogging (T1056)",
        "GetForegroundWindow": "Discovery (T1120)",
        "GetKeyboardLayout": "Discovery (T1120)",
        "GetClipboardData": "Collection (T1115)",
        "GetWindowThreadProcessId": "Discovery (T1120)"
    }
    if function_name in function_techniques:
        return function_techniques[function_name]
    return None

def analyze_malware_capabilities(imports):
    mapped_techniques = defaultdict(list)
    for module, functions in imports.items():
        for func in functions:
            if func is None:  
                continue
            technique = detect_technique(func, module, imports)
            if technique:
                mapped_techniques[technique].append((module, func))

    results = []
    for technique, mapped_functions in mapped_techniques.items():
        if mapped_functions:
            for module, function in mapped_functions:
                results.append([technique, module, function])

    headers = ["Technique", "Module", "Function"]
    print("\nMapped MITRE ATT&CK Techniques:")
    print(tabulate(results, headers=headers, tablefmt="grid"))

def file_analysis(file_path):
    compilation_time = get_compilation_time(file_path)
    if compilation_time:
        print(f"[*] File compiled at: {compilation_time}")
    else:
        print("[-] Failed to retrieve compilation time information.")

    imports = find_imports(file_path)
    analyze_malware_capabilities(imports)
